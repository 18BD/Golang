// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protoFiles/book_complaint.proto

package libraryService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookComplaintServiceClient is the client API for BookComplaintService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookComplaintServiceClient interface {
	AddBookComplaint(ctx context.Context, in *AddBookComplaintRequest, opts ...grpc.CallOption) (*AddBookComplaintResponse, error)
	EditBookComplaint(ctx context.Context, in *EditBookComplaintRequest, opts ...grpc.CallOption) (*EditBookComplaintResponse, error)
}

type bookComplaintServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookComplaintServiceClient(cc grpc.ClientConnInterface) BookComplaintServiceClient {
	return &bookComplaintServiceClient{cc}
}

func (c *bookComplaintServiceClient) AddBookComplaint(ctx context.Context, in *AddBookComplaintRequest, opts ...grpc.CallOption) (*AddBookComplaintResponse, error) {
	out := new(AddBookComplaintResponse)
	err := c.cc.Invoke(ctx, "/libraryService.BookComplaintService/AddBookComplaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookComplaintServiceClient) EditBookComplaint(ctx context.Context, in *EditBookComplaintRequest, opts ...grpc.CallOption) (*EditBookComplaintResponse, error) {
	out := new(EditBookComplaintResponse)
	err := c.cc.Invoke(ctx, "/libraryService.BookComplaintService/EditBookComplaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookComplaintServiceServer is the server API for BookComplaintService service.
// All implementations must embed UnimplementedBookComplaintServiceServer
// for forward compatibility
type BookComplaintServiceServer interface {
	AddBookComplaint(context.Context, *AddBookComplaintRequest) (*AddBookComplaintResponse, error)
	EditBookComplaint(context.Context, *EditBookComplaintRequest) (*EditBookComplaintResponse, error)
	mustEmbedUnimplementedBookComplaintServiceServer()
}

// UnimplementedBookComplaintServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookComplaintServiceServer struct {
}

func (UnimplementedBookComplaintServiceServer) AddBookComplaint(context.Context, *AddBookComplaintRequest) (*AddBookComplaintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBookComplaint not implemented")
}
func (UnimplementedBookComplaintServiceServer) EditBookComplaint(context.Context, *EditBookComplaintRequest) (*EditBookComplaintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBookComplaint not implemented")
}
func (UnimplementedBookComplaintServiceServer) mustEmbedUnimplementedBookComplaintServiceServer() {}

// UnsafeBookComplaintServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookComplaintServiceServer will
// result in compilation errors.
type UnsafeBookComplaintServiceServer interface {
	mustEmbedUnimplementedBookComplaintServiceServer()
}

func RegisterBookComplaintServiceServer(s grpc.ServiceRegistrar, srv BookComplaintServiceServer) {
	s.RegisterService(&BookComplaintService_ServiceDesc, srv)
}

func _BookComplaintService_AddBookComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookComplaintServiceServer).AddBookComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libraryService.BookComplaintService/AddBookComplaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookComplaintServiceServer).AddBookComplaint(ctx, req.(*AddBookComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookComplaintService_EditBookComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBookComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookComplaintServiceServer).EditBookComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libraryService.BookComplaintService/EditBookComplaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookComplaintServiceServer).EditBookComplaint(ctx, req.(*EditBookComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookComplaintService_ServiceDesc is the grpc.ServiceDesc for BookComplaintService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookComplaintService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libraryService.BookComplaintService",
	HandlerType: (*BookComplaintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBookComplaint",
			Handler:    _BookComplaintService_AddBookComplaint_Handler,
		},
		{
			MethodName: "EditBookComplaint",
			Handler:    _BookComplaintService_EditBookComplaint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoFiles/book_complaint.proto",
}
