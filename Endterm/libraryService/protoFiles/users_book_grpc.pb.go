// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protoFiles/users_book.proto

package libraryService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserBookServiceClient is the client API for UserBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserBookServiceClient interface {
	GetUserBook(ctx context.Context, in *GetUserBooksRequest, opts ...grpc.CallOption) (*GetUserBooksResponse, error)
	AddUserBook(ctx context.Context, in *AddUserBookRequest, opts ...grpc.CallOption) (*AddUserBookResponse, error)
	EditUserBook(ctx context.Context, in *EditUserBookRequest, opts ...grpc.CallOption) (*EditUserBookResponse, error)
	DeleteUserBook(ctx context.Context, in *DeleteUserBookRequest, opts ...grpc.CallOption) (*DeleteUserBookResponse, error)
}

type userBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserBookServiceClient(cc grpc.ClientConnInterface) UserBookServiceClient {
	return &userBookServiceClient{cc}
}

func (c *userBookServiceClient) GetUserBook(ctx context.Context, in *GetUserBooksRequest, opts ...grpc.CallOption) (*GetUserBooksResponse, error) {
	out := new(GetUserBooksResponse)
	err := c.cc.Invoke(ctx, "/libraryService.UserBookService/GetUserBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBookServiceClient) AddUserBook(ctx context.Context, in *AddUserBookRequest, opts ...grpc.CallOption) (*AddUserBookResponse, error) {
	out := new(AddUserBookResponse)
	err := c.cc.Invoke(ctx, "/libraryService.UserBookService/AddUserBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBookServiceClient) EditUserBook(ctx context.Context, in *EditUserBookRequest, opts ...grpc.CallOption) (*EditUserBookResponse, error) {
	out := new(EditUserBookResponse)
	err := c.cc.Invoke(ctx, "/libraryService.UserBookService/EditUserBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBookServiceClient) DeleteUserBook(ctx context.Context, in *DeleteUserBookRequest, opts ...grpc.CallOption) (*DeleteUserBookResponse, error) {
	out := new(DeleteUserBookResponse)
	err := c.cc.Invoke(ctx, "/libraryService.UserBookService/DeleteUserBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserBookServiceServer is the server API for UserBookService service.
// All implementations must embed UnimplementedUserBookServiceServer
// for forward compatibility
type UserBookServiceServer interface {
	GetUserBook(context.Context, *GetUserBooksRequest) (*GetUserBooksResponse, error)
	AddUserBook(context.Context, *AddUserBookRequest) (*AddUserBookResponse, error)
	EditUserBook(context.Context, *EditUserBookRequest) (*EditUserBookResponse, error)
	DeleteUserBook(context.Context, *DeleteUserBookRequest) (*DeleteUserBookResponse, error)
	mustEmbedUnimplementedUserBookServiceServer()
}

// UnimplementedUserBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserBookServiceServer struct {
}

func (UnimplementedUserBookServiceServer) GetUserBook(context.Context, *GetUserBooksRequest) (*GetUserBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBook not implemented")
}
func (UnimplementedUserBookServiceServer) AddUserBook(context.Context, *AddUserBookRequest) (*AddUserBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserBook not implemented")
}
func (UnimplementedUserBookServiceServer) EditUserBook(context.Context, *EditUserBookRequest) (*EditUserBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserBook not implemented")
}
func (UnimplementedUserBookServiceServer) DeleteUserBook(context.Context, *DeleteUserBookRequest) (*DeleteUserBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserBook not implemented")
}
func (UnimplementedUserBookServiceServer) mustEmbedUnimplementedUserBookServiceServer() {}

// UnsafeUserBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserBookServiceServer will
// result in compilation errors.
type UnsafeUserBookServiceServer interface {
	mustEmbedUnimplementedUserBookServiceServer()
}

func RegisterUserBookServiceServer(s grpc.ServiceRegistrar, srv UserBookServiceServer) {
	s.RegisterService(&UserBookService_ServiceDesc, srv)
}

func _UserBookService_GetUserBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBookServiceServer).GetUserBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libraryService.UserBookService/GetUserBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBookServiceServer).GetUserBook(ctx, req.(*GetUserBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBookService_AddUserBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBookServiceServer).AddUserBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libraryService.UserBookService/AddUserBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBookServiceServer).AddUserBook(ctx, req.(*AddUserBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBookService_EditUserBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBookServiceServer).EditUserBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libraryService.UserBookService/EditUserBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBookServiceServer).EditUserBook(ctx, req.(*EditUserBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBookService_DeleteUserBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBookServiceServer).DeleteUserBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libraryService.UserBookService/DeleteUserBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBookServiceServer).DeleteUserBook(ctx, req.(*DeleteUserBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserBookService_ServiceDesc is the grpc.ServiceDesc for UserBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libraryService.UserBookService",
	HandlerType: (*UserBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBook",
			Handler:    _UserBookService_GetUserBook_Handler,
		},
		{
			MethodName: "AddUserBook",
			Handler:    _UserBookService_AddUserBook_Handler,
		},
		{
			MethodName: "EditUserBook",
			Handler:    _UserBookService_EditUserBook_Handler,
		},
		{
			MethodName: "DeleteUserBook",
			Handler:    _UserBookService_DeleteUserBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoFiles/users_book.proto",
}
